A robot is located at the top-left corner of an A x B grid

The robot can only move either down or right at any point in time. 

The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).

How many possible unique paths are there?



bool isValid(int A, int B, int x, int y)
{
    return ((x >=0)&&(y>=0)&&(x<A)&&(y<B));
}

int Solution::uniquePaths(int A, int B) 
{
    if ( (A < 2) || (B < 2) )
    {
        if ( (A < 1) || (B < 1) )
        {
            return 0;
        }
        
        return 1;
    }
    
    // number of ways to get to last square = 
    // number of ways to get to above square +
    // number of ways to get to left square
    
    // grid holding number of ways to get to each square
    int DP[A][B];
    
    // initialize all squares to 0
    memset(DP, 0, sizeof(DP[0][0]) * A * B);

    // set value at top left to 1
    DP[0][0] = 1;
    
    for (int i=0; i<A; ++i)
    {
        for (int j=0; j<B; ++j)
        {
            if (isValid(A, B, i, j-1))
            {
                DP[i][j] += DP[i][j-1];
            }
            if (isValid(A, B, i-1, j))
            {
                DP[i][j] += DP[i-1][j];
            }
        }
    }
    
    return DP[A-1][B-1];
}
